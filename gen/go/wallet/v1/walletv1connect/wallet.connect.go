// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wallet/v1/wallet.proto

package walletv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/avasapollo/eth-erc20/gen/go/wallet/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WalletServiceName is the fully-qualified name of the WalletService service.
	WalletServiceName = "wallet.v1.WalletService"
)

// WalletServiceClient is a client for the wallet.v1.WalletService service.
type WalletServiceClient interface {
	CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountReq]) (*connect_go.Response[v1.CreateAccountResp], error)
	GetAccount(context.Context, *connect_go.Request[v1.GetAccountReq]) (*connect_go.Response[v1.GetAccountResp], error)
	ImportAccount(context.Context, *connect_go.Request[v1.ImportAccountReq]) (*connect_go.Response[v1.ImportAccountResp], error)
}

// NewWalletServiceClient constructs a client for the wallet.v1.WalletService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWalletServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WalletServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &walletServiceClient{
		createAccount: connect_go.NewClient[v1.CreateAccountReq, v1.CreateAccountResp](
			httpClient,
			baseURL+"/wallet.v1.WalletService/CreateAccount",
			opts...,
		),
		getAccount: connect_go.NewClient[v1.GetAccountReq, v1.GetAccountResp](
			httpClient,
			baseURL+"/wallet.v1.WalletService/GetAccount",
			opts...,
		),
		importAccount: connect_go.NewClient[v1.ImportAccountReq, v1.ImportAccountResp](
			httpClient,
			baseURL+"/wallet.v1.WalletService/ImportAccount",
			opts...,
		),
	}
}

// walletServiceClient implements WalletServiceClient.
type walletServiceClient struct {
	createAccount *connect_go.Client[v1.CreateAccountReq, v1.CreateAccountResp]
	getAccount    *connect_go.Client[v1.GetAccountReq, v1.GetAccountResp]
	importAccount *connect_go.Client[v1.ImportAccountReq, v1.ImportAccountResp]
}

// CreateAccount calls wallet.v1.WalletService.CreateAccount.
func (c *walletServiceClient) CreateAccount(ctx context.Context, req *connect_go.Request[v1.CreateAccountReq]) (*connect_go.Response[v1.CreateAccountResp], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// GetAccount calls wallet.v1.WalletService.GetAccount.
func (c *walletServiceClient) GetAccount(ctx context.Context, req *connect_go.Request[v1.GetAccountReq]) (*connect_go.Response[v1.GetAccountResp], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// ImportAccount calls wallet.v1.WalletService.ImportAccount.
func (c *walletServiceClient) ImportAccount(ctx context.Context, req *connect_go.Request[v1.ImportAccountReq]) (*connect_go.Response[v1.ImportAccountResp], error) {
	return c.importAccount.CallUnary(ctx, req)
}

// WalletServiceHandler is an implementation of the wallet.v1.WalletService service.
type WalletServiceHandler interface {
	CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountReq]) (*connect_go.Response[v1.CreateAccountResp], error)
	GetAccount(context.Context, *connect_go.Request[v1.GetAccountReq]) (*connect_go.Response[v1.GetAccountResp], error)
	ImportAccount(context.Context, *connect_go.Request[v1.ImportAccountReq]) (*connect_go.Response[v1.ImportAccountResp], error)
}

// NewWalletServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWalletServiceHandler(svc WalletServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/wallet.v1.WalletService/CreateAccount", connect_go.NewUnaryHandler(
		"/wallet.v1.WalletService/CreateAccount",
		svc.CreateAccount,
		opts...,
	))
	mux.Handle("/wallet.v1.WalletService/GetAccount", connect_go.NewUnaryHandler(
		"/wallet.v1.WalletService/GetAccount",
		svc.GetAccount,
		opts...,
	))
	mux.Handle("/wallet.v1.WalletService/ImportAccount", connect_go.NewUnaryHandler(
		"/wallet.v1.WalletService/ImportAccount",
		svc.ImportAccount,
		opts...,
	))
	return "/wallet.v1.WalletService/", mux
}

// UnimplementedWalletServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWalletServiceHandler struct{}

func (UnimplementedWalletServiceHandler) CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountReq]) (*connect_go.Response[v1.CreateAccountResp], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wallet.v1.WalletService.CreateAccount is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetAccount(context.Context, *connect_go.Request[v1.GetAccountReq]) (*connect_go.Response[v1.GetAccountResp], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wallet.v1.WalletService.GetAccount is not implemented"))
}

func (UnimplementedWalletServiceHandler) ImportAccount(context.Context, *connect_go.Request[v1.ImportAccountReq]) (*connect_go.Response[v1.ImportAccountResp], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wallet.v1.WalletService.ImportAccount is not implemented"))
}
